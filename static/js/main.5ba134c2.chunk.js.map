{"version":3,"sources":["components/Header.js","components/Footer.js","components/List.js","components/ToDos.js","App.js","index.js"],"names":["Header","Footer","year","Date","getFullYear","List","props","useState","userInput","setUserInput","onSubmit","e","preventDefault","console","log","uuidv4","length","setList","prevState","id","title","trim","done","type","value","onChange","target","ToDos","userTodos","list","map","toDo","i","defaultChecked","check","onClick","remove","App","Fragment","itemToRemove","newArr","filter","item","itemToCheck","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAOeA,EAPA,WACb,OACE,8BACE,sECMSC,EATA,WACb,IAAIC,GAAO,IAAIC,MAAOC,cACtB,OACE,8BACE,iDAAiBF,EAAjB,U,eC0BSG,EA5BF,SAACC,GAGZ,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAiBA,OACE,uBAAMC,SAbR,SAAsBC,GACpBA,EAAEC,iBAEFC,QAAQC,IAAIC,eACRP,EAAUQ,SACZV,EAAMW,SAAQ,SAACC,GAAD,4BACTA,GADS,CAEZ,CAAEC,GAAIJ,cAAUK,MAAOZ,EAAUa,OAAQC,MAAM,QAEjDb,EAAa,MAIf,UACE,uBAAOc,KAAK,OAAOC,MAAOhB,EAAWiB,SAlBzC,SAAsBd,GAEpBF,EAAaE,EAAEe,OAAOF,UAiBpB,uBAAOD,KAAK,SAASC,MAAM,YCHlBG,EAtBD,SAACrB,GACb,IAAMsB,EAAYtB,EAAMuB,KAAKC,KAAI,SAACC,EAAMC,GAAP,OAC/B,+BACE,uBACET,KAAK,WACLU,eAAgBF,EAAKT,KACrBG,SAAU,kBAAMnB,EAAM4B,MAAMH,EAAKZ,OAElCY,EAAKX,MACN,mBACEe,QAAS,WACPtB,QAAQC,IAAIiB,EAAKZ,IACjBb,EAAM8B,OAAOL,EAAKZ,KAHtB,4BAPOa,MAiBX,OAAO,6BAAKJ,KCiBCS,MA9Bf,WACE,MAAwB9B,mBAAS,IAAjC,mBAAOsB,EAAP,KAAaZ,EAAb,KAmBA,OACE,eAAC,IAAMqB,SAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAMrB,QAASA,IACf,cAAC,EAAD,CAAOY,KAAMA,EAAMO,OAtBR,SAACG,GAEd,IAAMC,EAASX,EAAKY,QAAO,SAACC,GAAD,OAAUA,EAAKvB,KAAOoB,KACjDtB,EAAQuB,IAmB6BN,MAjBzB,SAACS,GAEb9B,QAAQC,IAAI6B,GACZd,EAAKY,QAAO,SAACC,GAKX,OAJIA,EAAKvB,KAAOwB,IAEdD,EAAKpB,MAAQoB,EAAKpB,MAEboB,KAET7B,QAAQC,IAAIe,MAQV,cAAC,EAAD,Q,MCzBNe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5ba134c2.chunk.js","sourcesContent":["const Header = () => {\n  return (\n    <div>\n      <h1>What you are Planning ToDo today?</h1>\n    </div>\n  );\n};\nexport default Header;\n","const Footer = () => {\n  let year = new Date().getFullYear();\n  return (\n    <div>\n      <h4>Copyrights Â®{year} </h4>\n    </div>\n  );\n};\n\nexport default Footer;\n","import { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nconst List = (props) => {\n  //   console.log(props);\n  //   console.log(props.setList);\n  const [userInput, setUserInput] = useState(\"\");\n  function changeHandle(e) {\n    // console.log(e.target.value);\n    setUserInput(e.target.value);\n  }\n  function submitHandle(e) {\n    e.preventDefault();\n    // prevState holds on the value of state before any update on the state\n    console.log(uuidv4());\n    if (userInput.length) {\n      props.setList((prevState) => [\n        ...prevState,\n        { id: uuidv4(), title: userInput.trim(), done: false },\n      ]);\n      setUserInput(\"\");\n    }\n  }\n  return (\n    <form onSubmit={submitHandle}>\n      <input type=\"text\" value={userInput} onChange={changeHandle} />\n      <input type=\"submit\" value=\"Add\" />\n    </form>\n  );\n};\n\nexport default List;\n","const ToDos = (props) => {\n  const userTodos = props.list.map((toDo, i) => (\n    <li key={i}>\n      <input\n        type=\"checkbox\"\n        defaultChecked={toDo.done}\n        onChange={() => props.check(toDo.id)}\n      />\n      {toDo.title}\n      <i\n        onClick={() => {\n          console.log(toDo.id);\n          props.remove(toDo.id);\n        }}\n      >\n        ðŸ—‘\n      </i>\n    </li>\n  ));\n  return <ul>{userTodos}</ul>;\n};\n\nexport default ToDos;\n","//import React, { useState, Fragment } from \"react\";\nimport React, { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport List from \"./components/List\";\nimport ToDos from \"./components/ToDos\";\nfunction App() {\n  const [list, setList] = useState([]);\n  const remove = (itemToRemove) => {\n    // itemToRemove has the id for that specific item\n    const newArr = list.filter((item) => item.id !== itemToRemove);\n    setList(newArr);\n  };\n  const check = (itemToCheck) => {\n    // itemToCheck has the id for that specific item\n    console.log(itemToCheck);\n    list.filter((item) => {\n      if (item.id === itemToCheck) {\n        // revers done\n        item.done = !item.done;\n      }\n      return item;\n    });\n    console.log(list);\n  };\n  // React Fragments allow you to wrap multiple elements without adding an extra node to the DOM. This can be useful when rendering multiple child elements/components in a single parent component.\n  return (\n    <React.Fragment>\n      <Header />\n      <List setList={setList} />\n      <ToDos list={list} remove={remove} check={check} />\n      <Footer />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport \"./sass/main.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}